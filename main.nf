#!/usr/bin/env nextflow

// Define workflow parameters
params.reads_dir = "."
params.ref_file = "./reference.fasta"
params.output_dir = "./output"
params.input_dir = "./output" 
params.output_csv = "."

// Define processes

// process get_alignment_stats {
//     input:
//     path bam_file
//     path output_csv

//     output:
//     path output_csv

//     script:
//     """
//     # Process BAM file using the get_alignment_stats.py script
//     python bin/python_scripts/get_alignment_stats.py $bam_file $output_csv
//     """
// }

// process bin_reads {
//     input:
//     path input_dir
//     path output_csv

//     output:
//     path output_csv

//     script:
//     """
//     # Process CSV files to bin the data using bin_aligned_reads.py
//     python bin/python_scripts/bin_aligned_reads.py $input_dir $output_csv
//     """
// }

process bowtie2_alignment {
    scratch true

    publishDir(
    path: "${params.output_dir}/",
    mode: 'copy',
)

    input:
    path reads_dir
    path ref_file
    path output_dir

    script:
    """
    # Align reads using Bowtie2
    bash ~/webber_group/Gregory_Wickham/psoraseq/psoraseq/bin/shell_scripts/bowtie2_alignment.sh $reads_dir $ref_file $output_dir
    """
}

// Workflow definition
workflow {
    reads = file(params.reads_dir)
    ref = file(params.ref_file)
    output = file(params.output_dir)
    input_csvs = file(params.input_dir)

    // Run Bowtie2 alignment
    aligned_bams = bowtie2_alignment(reads, ref, output)

    // // Process BAM files with alignment stats
    // stats_csvs = aligned_bams.collect().map { bam ->
    //     get_alignment_stats(bam, output)
    // }

    // // Binning the CSV files generated by the get_alignment_stats process
    // final_output = bin_reads(input_csvs, params.output_csv)

    // // The final output CSV will be written to the specified location
    // final_output
}