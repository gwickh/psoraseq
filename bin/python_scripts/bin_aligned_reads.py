import os
import csv
import argparse
import numpy as np 
import pandas as pd

def read_csv(file_path):
    data = pd.read_csv(file_path)
    # Convert to numpy array
    return data[['Region Start', 'Region End', 'Length', 'Midpoint']].to_numpy()

def bin_aligned_reads(datafiles, output_csv):
    longest_read = 0
    for name, file_path in datafiles.items():
        # Load the CSV data for each sample
        data = read_csv(file_path)
        
        # Filter out reads > 1000 or < -1000
        data = data[np.abs(data[:, 2]) <= 1000]
        datafiles[name] = data 
        longest_read = max(longest_read, len(data))
        
    # Populate raw matrix with midpoints for each sample
    raw_data = np.full((longest_read, len(datafiles)), np.nan)  # Initialize data matrix
    for i, (name, data) in enumerate(datafiles.items()):
        midpoints = data[:, 3]
        raw_data[:len(midpoints), i] = midpoints
        
    # Define bin size and create bins
    binsize = 1000
    lowbin = np.ceil(np.nanmin(raw_data) / binsize) * binsize
    highbin = np.floor(np.nanmax(raw_data) / binsize) * binsize
    
    bins = np.arange(
        lowbin, 
        highbin + binsize, 
        binsize
    )
    numbins = len(bins)
    
    # Bin the data for each sample
    histtable = np.zeros((numbins - 1, len(datafiles)))     
    for i in range(len(datafiles)):
        hist_counts, _ = np.histogram(raw_data[:, i], bins=bins)
        histtable[:, i] = hist_counts
    
    # Prepare header and data for export
    header = ['Bins'] + list(datafiles.keys())
    binned_data = np.column_stack((bins[:-1], histtable))  # Exclude last bin for histtable

    # Convert data to DataFrame for easy export
    df = pd.DataFrame(binned_data, columns=header)
    df.to_csv(output_csv, index=False)

    print(f"Data has been successfully exported to {output_csv}")
    
    
def main():
    # Set up command-line argument parsing
    parser = argparse.ArgumentParser(
        description='Compare binning data from multiple CSV files and export to excel.'
    )
    # Argument for input directory containing the CSV files
    parser.add_argument(
        'input_dir', 
        type=str, 
        help='Directory containing the CSV files generated by bin_reads.'
    )
    # Argument for output file
    parser.add_argument(
        'output_csv', 
        type=str, 
        help='Output Excel file for binned data.'
    )
    
    args = parser.parse_args()
    
    # get paths to CSV files in specified dir
    datafiles = {}
    for filename in os.listdir(args.input_dir):
        if filename.endswith('.csv'):
            sample_name = os.path.splitext(filename)[0]  # get name without ext
            file_path = os.path.join(args.input_dir, filename)
            datafiles[sample_name] = file_path
    
    # Call compare with datafiles and output CSV path
    bin_aligned_reads(datafiles, args.output_csv)

if __name__ == "__main__":
    main()